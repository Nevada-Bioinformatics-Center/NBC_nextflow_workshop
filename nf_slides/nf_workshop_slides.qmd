---
title: "Creating Automated and Reproducible Pipelines with Nextflow"
author: "Nevada Bioinformatics Center | UNR"
format: 
  revealjs:
    slide-number: true
    code-link: true
    highlight-style: a11y
    chalkboard: true
    theme:
      - nceas_styles.scss
editor: visual
---

# Fundamentals of Pipeline

## 

Data science pipelines are just like cooking!

![](images/cooking_pipeline.png){fig-align="center" width="647"}

## What is a Pipeline ?

::: incremental
-   A **pipeline** is an automated sequence of steps that process data, such as collection, cleaning, transformation, analysis, and storage.

-   It involves multiple software packages, often in different environments, and scripts in various programming languages.
:::

## Is it Pipeline or Workflow?

::: incremental
-   A **workflow** is a broader term that encompasses any sequence of tasks or processes

-   A **pipeline** refers to a specific type of workflow focused on processing and transforming data in a linear or sequential manner.
:::

## A Traditional Bioinformatics Pipeline

![Pipeline for Variant Calling.](images/traditional_pipeline.png)

# Workflow Management Systems (WFMS)

##  {.smaller}

**Workflow Management Systems** (WFMS) is a platform that automates and manages complex workflow/pipelines by defining task dependencies and orchestrating their execution across different computational environments.

![Some examples of WFMS ..](images/wfms_logos.png){width="600"}

## A Traditional Pipeline Wrapped by Scientific WFMS

![Pipeline for Variant Calling wrapped within a Workflow Manager](images/pipeline_workflow_manager.png)

## Key features of WFMS include:

::: incremental
-   Run time management

-   Software management

-   Portability & interoperability

-   Reproducibility

-   Reentrancy
:::

## 

[![](images/Nextflow_logo.png){fig-alt="Nextflow" fig-align="center"}](https://www.nextflow.io/)

**Nextflow** is a scientific workflow framework that can be used by a bioinformatician or data scientist to integrate all of their bash/python/Perl/other scripts into a one cohesive pipeline that are portable, reproducible, scalable and check-pointed.

<https://www.nextflow.io/>

## Nextflow core features

[![Some of the features of nextflow ..](images/nextflow_features.png)](https://www.nextflow.io/)

##  {.scrollable}

::::: columns
::: {.column width="50%"}
![](images/Nextflow_logo.png){fig-align="center" width="457"}

-   Groovy-based, flexible, supports complex logic

-   Out-of-the-box executors such as AWS, Google cloud, etc.

-   Emphasizes portability with container integration

-   Seqera & growing community, supports multi-platform workflows
:::

::: {.column width="50%"}
![](images/snakemake_logo.png){fig-align="center" width="476"}

-   Python-based, simple, rule-driven

-   Local, clusters, and cloud with built-in scheduler support

-   Strong focus on reproducibility and environment consistency

-   Large bioinformatics community
:::
:::::

# Installation & Setup

## Downloading Workshop Materials

The scripts & materials for this workshop is available: <https://github.com/Nevada-Bioinformatics-Center/NBC_nextflow_workshop>

To download

``` bash
# get the git repository
git clone https://github.com/Nevada-Bioinformatics-Center/NBC_nextflow_workshop.git
```

## Pre-requisites

Nextflow can be used on any POSIX-compatible system (Linux, macOS, etc.) and on Windows through WSL.

-   It requires **Java 17 (or later, up to 23)**.

``` bash
java -version
```

For more information: <https://www.nextflow.io/docs/latest/install.html>

## Installing Java with SDKMAN

If Java is not installed in your system, fret not! Here, we will install through [SDKMAN!](https://sdkman.io/)

1.  Install SDKMAN!

    ``` bash
    curl -s https://get.sdkman.io | bash
    ```

2.  Open a new terminal or console

3.  Install Java

    ``` bash
    sdk install java 17.0.10-tem
    ```

4.  Confirm that Java is installed correctly

    ``` bash
    java -version
    ```

    For more information, see this [website](https://whichjdk.com/).

## Installing Nextflow

::: incremental
-   Step 1: Install nextflow by running the following command in the current directory

    ``` bash
    curl -s https://get.nextflow.io | bash
    ```
:::

::: incremental
-   Step 2: Make Nextflow executable

    ``` bash
    chmod +x nextflow
    ```
:::

##  {.smaller}

::: incremental
-   Step 3: Move Nextflow into an executable path.

    ``` bash
    mkdir -p $HOME/.local/bin/
    mv nextflow $HOME/.local/bin/
    ```

-   Ensure the directory `$HOME/.local/bin/` is included in your `PATH` variable. Temporarily add this directory to `PATH`

    ``` bash
    export PATH="$PATH:$HOME/.local/bin"
    ```

    Then, add this `PATH` permanently by adding the export command to your shell configuration file, such as `~/.bashrc` or `~/.zshrc`.
:::

::: incremental
-   Step 4: Confirm that Nextflow is installed correctly

    ``` bash
    nextflow info
    ```
:::

## Installing Visual Studio Code editor {.scrollable}

-   Step 1: Download [Visual Studio Code](https://code.visualstudio.com/){.uri}. The button or buttons should be specific to your platform and the download package should be installable.
-   Step 2: Add Nextflow language support in Visual Studio Code by clicking the install button on the Nextflow language extension.

# Getting Started

## Nextflow 101

Nextflow pipelines have three main parts: *processes, channels* and *workflows*.

![Nextflow process flow diagram](images/process_channels_workflows.png)

## Nextflow 101 contd ..

::: incremental
-   A ***process*** defines the command or script to execute, while the ***executor*** determines how it's run on the target system.

    ![Nextflow executors](images/executors.png){width="306"}

-   Nextflow separates the functional logic of the pipeline from the execution platform.
:::

## Objectives

1.  Understand the structure of a basic Nextflow script
2.  Create a simple process to print a message
3.  Define a workflow to run that message
4.  Execute the script to see the results

## Task

#### We want to print the following *welcoming message* via bash code but in nextflow.

``` bash
echo "Hello, welcome to the NBC Nextflow Workshop!"
```

## Your first script

``` groovy
#!/usr/bin/env nextflow

// Enable DSL 2 syntax
nextflow.enable.dsl = 2

/*
 * A Simple Nextflow script to print 'Hello, welcome to the NBC Nextflow Workshop!'
 */

// Define a process called 'greetings' that will output to standard output
 process greetings {
    
     output:
        stdout
    
    // The script section that prints the statement
     script:
    """
    echo 'Hello, welcome to the NBC Nextflow Workshop!'
    """
 }


// Workflow definition: Calls the 'greetings' process
 workflow  {

    greetings()
     
 }
```

## Let's break down our simple code .. {.scrollable}

-   The first line `!/usr/bin/env nextflow` is known as the *'Shebang'* line, specifying the location of the nextflow interpreter.
-   `nextflow.enable.dsl = 2` is used to enable DSL2 syntax.
-   Note: A line comment in nextflow starts with `//` and a comment block `/* .. */`.

## Let's break down our simple code .. {.scrollable}

1.  Defining the process:

-   The `greetings` process will run the command \`echo 'Hello, welcome to the NBC Nextflow Workshop!'

-   Note: This process does not generate an output file but simply prints the above statement to the console.

``` groovy
// Define a process called 'greetings' that will output to standard output
 process greetings {
    
     output:
        stdout
    
    // The script section that prints the statement
     script:
    """
    echo 'Hello, welcome to the NBC Nextflow Workshop!'
    """
 }
```

## Let's break down our simple code

2.  Creating the workflow:

-   The `workflow` block runs the `greetings` process.

-   This is where the execution order of processes is defined. Since, it is the only process, it will run once.

``` groovy
// Workflow definition: Calls the 'greetings' process
 workflow  {

    greetings()
     
 }
```

## Executing Our Code

Execute the script by entering the following command in your terminal:

``` bash
nextflow run greetings.nf
```

# Tacos with Nextflow

## Overview

In this tutorial, we will:

1.  **Prepare the tortilla** - Choose a tortilla type `flour` or `corn`.
2.  **Cook the protein** - Choose a protein `steak`, `chicken`, `carnitas` or `sofritas`.
3.  **Prepare the toppings** - Add your choice of toppings.
4.  **Assemble the taco** - Combine the tortilla, protein, and toppings into a final taco.

We will be building this tutorial pipeline hands-on!

## Generating Execution report

Let's create an HTML execution report - which includes useful metrics about the workflow execution.

``` bash
nextflow run <pipeline> -with-report [file-name]
```

The report is organised in the three main sections:

-   `Summary`

-   `Resources`

-   `Tasks`

# Resources

##  {.scrollable}

To help you dive deeper into Nextflow and data-driven workflows, here are some additional resources:

### 1. Nextflow Documentation

-   [Nextflow User Guide](https://www.nextflow.io/docs/latest/index.html)

-   [Nextflow DSL2 Syntax Documentation](https://www.nextflow.io/docs/latest/dsl1.html)

### 2. Tutorials and Guides

-   [Nextflow Tutorials](https://training.nextflow.io/) - Some more hands-on tutorials!

-   [Nextflow YouTube Channel](https://www.youtube.com/c/nextflow) - Video tutorials and presentations by the Nextflow team at Seqera.

### 3. Community and Support

-   [Nextflow Slack](https://www.nextflow.io/slack-invite.html) - Join the Nextflow Slack channel for real-time community support.

-   [Seqera](https://seqera.io/) - Explore a range of solutions offered by Seqera Labs for building and managing workflows at scale.

## 

**Congratulations** on completing the ***Nextflow Workshop!***

**Happy Nextflow-ing!!!** ðŸš€
