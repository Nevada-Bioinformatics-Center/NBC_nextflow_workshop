{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Creating Automated and Reproducible Pipelines with Nextflow\"\n",
        "author: \"Kanishka Manna\"\n",
        "format: revealjs\n",
        "editor: visual\n",
        "---\n",
        "\n",
        "\n",
        "# Fundamentals of Pipeline\n",
        "\n",
        "## \n",
        "\n",
        "Data science pipelines are just like cooking & making Tacos!\n",
        "\n",
        "![This image is generated by A.I.](images/data_science_cooking.png){fig-alt=\"This image is generated by AI\"}\n",
        "\n",
        "## What is a Pipeline ?\n",
        "\n",
        "::: incremental\n",
        "-   A **pipeline** is an automated sequence of steps that process data, such as collection, cleaning, transformation, analysis, and storage.\n",
        "\n",
        "-   It involves multiple software packages, often in different environments, and scripts in various programming languages.\n",
        ":::\n",
        "\n",
        "## Is it Pipeline or Workflow?\n",
        "\n",
        "::: incremental\n",
        "-   A **workflow** is a broader term that encompasses any sequence of tasks or processes\n",
        "\n",
        "-   A **pipeline** refers to a specific type of workflow focused on processing and transforming data in a linear or sequential manner.\n",
        ":::\n",
        "\n",
        "## A Traditional Bioinformatics Pipeline\n",
        "\n",
        "![Pipeline for Variant Calling.](images/traditional_pipeline.png)\n",
        "\n",
        "# Workflow Management Systems (WFMS)\n",
        "\n",
        "## \n",
        "\n",
        "**Workflow Management Systems** (WFMS) such as Apache Airflow, Quickbase, Cuneiform, Common Workflow Language, Galaxy, Snakemake, Nextflow are designed to manage computational workflows in fields such as bioinformatics or data science.\n",
        "\n",
        "-   They streamline tasks by defining dependencies and automating processes across different computational environments.\n",
        "\n",
        "## A Traditional Pipeline Wrapped by Scientific WFMS\n",
        "\n",
        "![Pipeline for Variant Calling wrapped within a Workflow Manager](images/pipeline_workflow_manager.png)\n",
        "\n",
        "## Key features of WFMS include:\n",
        "\n",
        "::: incremental\n",
        "-   Run time management\n",
        "\n",
        "-   Software management\n",
        "\n",
        "-   Portability & interoperability\n",
        "\n",
        "-   Reproducibility\n",
        "\n",
        "-   Reentrancy\n",
        ":::\n",
        "\n",
        "## \n",
        "\n",
        "[![](images/Nextflow_logo.png){fig-alt=\"Nextflow\" fig-align=\"center\"}](https://www.nextflow.io/)\n",
        "\n",
        "**Nextflow** is a scientific workflow framework that can be used by a bioinformatician or data scientist to integrate all of their bash/python/Perl/other scripts into a one cohesive pipeline that are portable, reproducible, scalable and check-pointed.\n",
        "\n",
        "<https://www.nextflow.io/>\n",
        "\n",
        "## Nextflow core features\n",
        "\n",
        "[![Some of the features of nextflow ..](images/nextflow_features.png)](https://www.nextflow.io/)\n",
        "\n",
        "##  {.scrollable}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/Nextflow_logo.png)\n",
        "\n",
        "-   Groovy-based, flexible, supports complex logic\n",
        "\n",
        "-   Highly scalable, supports cloud, HPC, and containers (Docker/Singularity)\n",
        "\n",
        "-   Emphasizes portability with container integration\n",
        "\n",
        "-   Seqera & growing community, supports multi-platform workflows\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/snakemake_logo.png)\n",
        "\n",
        "-   Python-based, simple, rule-driven\n",
        "\n",
        "-   Local, clusters, and cloud with built-in scheduler support\n",
        "\n",
        "-   Strong focus on reproducibility and environment consistency\n",
        "\n",
        "-   Large bioinformatics community\n",
        ":::\n",
        ":::::\n",
        "\n",
        "# Installation & Setup\n",
        "\n",
        "## Installing Nextflow\n",
        "\n",
        "## Setting up our Workshop Directory\n",
        "\n",
        "Each workshop attendees should setup a training folder e.g. `nf_workshop`\n",
        "\n",
        "\n",
        "```{bash}\n",
        "mkdir nf_workshop\n",
        "cd nf_workshop\n",
        "```\n",
        "\n",
        "\n",
        "## Downloading Workshop Materials\n",
        "\n",
        "The scripts and materials for this workshop can be found in the \\[Nevada Bioinformatics Center\\](<https://github.com/Nevada-Bioinformatics-Center/NBC_nextflow_workshop>).\n",
        "\n",
        "To download, type in the series of commands in your terminal/console.\n",
        "\n",
        "\n",
        "```{bash}\n",
        "# get the git repository\n",
        "git clone https://github.com/Nevada-Bioinformatics-Center/NBC_nextflow_workshop.git\n",
        "```\n",
        "\n",
        "\n",
        "# Getting Started\n",
        "\n",
        "## Nextflow 101\n",
        "\n",
        "## Your first script\n",
        "\n",
        "```         \n",
        "#!/usr/bin/env nextflow\n",
        "\n",
        "// Enable DSL 2 syntax\n",
        "nextflow.enable.dsl = 2\n",
        "\n",
        "/*\n",
        " * A Simple Nextflow script to print 'Hello, welcome to the NBC Nextflow Workshop!'\n",
        " */\n",
        "\n",
        "// Define a process called 'greetings' that will output to standard output\n",
        " process greetings {\n",
        "    \n",
        "     output:\n",
        "        stdout\n",
        "    \n",
        "    // The script section that prints the statement\n",
        "     script:\n",
        "    \"\"\"\n",
        "    echo 'Hello, welcome to the NBC Nextflow Workshop!'\n",
        "    \"\"\"\n",
        " }\n",
        "\n",
        "\n",
        "// Workflow definition: Calls the 'greetings' process\n",
        " workflow  {\n",
        "\n",
        "    greetings()\n",
        "     \n",
        " }\n",
        "```\n",
        "\n",
        "## Let's break down our simple code .. {.scrollable}\n",
        "\n",
        "-   The first line `!/usr/bin/env nextflow` is known as the *'Shebang'* line, specifying the location of the nextflow interpreter.\n",
        "-   `nextflow.enable.dsl = 2` is used to enable DSL2 syntax.\n",
        "-   Note: A line comment in nextflow starts with `//` and a comment block `/* .. */`.\n",
        "\n",
        "## Let's break down our simple code .. {.scrollable}\n",
        "\n",
        "1.  Defining the process:\n",
        "\n",
        "-   The `greetings` process will run the command \\`echo 'Hello, welcome to the NBC Nextflow Workshop!'\n",
        "\n",
        "-   Note: This process does not generate an output file but simply prints the above statement to the console.\n",
        "\n",
        "```         \n",
        "// Define a process called 'greetings' that will output to standard output\n",
        " process greetings {\n",
        "    \n",
        "     output:\n",
        "        stdout\n",
        "    \n",
        "    // The script section that prints the statement\n",
        "     script:\n",
        "    \"\"\"\n",
        "    echo 'Hello, welcome to the NBC Nextflow Workshop!'\n",
        "    \"\"\"\n",
        " }\n",
        "```\n",
        "\n",
        "## Let's break down our simple code\n",
        "\n",
        "2.  Creating the workflow:\n",
        "\n",
        "-   The `workflow` block runs the `greetings` process.\n",
        "\n",
        "-   This is where the execution order of processes is defined. Since, it is the only process, it will run once.\n",
        "\n",
        "```         \n",
        "// Workflow definition: Calls the 'greetings' process\n",
        " workflow  {\n",
        "\n",
        "    greetings()\n",
        "     \n",
        " }\n",
        "```"
      ],
      "id": "588a3fad"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}